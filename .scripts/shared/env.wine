#WINE_DEVEL="/Applications/Wine Devel.app"
#START_BIN="${WINE_DEVEL}/Contents/Resources/start/bin"
#WINE_BIN="${WINE_DEVEL}/Contents/Resources/wine/bin"

# Export relevant paths
#export PATH="${START_BIN}:${WINE_BIN}:${PATH}"

# Prevent variable leakage
#unset WINE_DEVEL
#unset START_BIN
#unset WINE_BIN

# Create an associative array for the wine executables
declare -A wine_progs

# A function to index (once) the wine executables and shortnames
# without .exe extension
function index_wine_progs() {
  if [[ ${#wine_progs[@]} -gt 0 && ${2:-false} == "false" ]]; then
    return 0
  fi

  shopt 2>/dev/null -s globstar
  local DRIVE="$HOME/.wine/drive_${1:-c}"

  printf "Indexing wine programs in $DRIVE..."

  for f in "$DRIVE"/**/*.exe; do
    local onlyfile=$(basename -- "$f")
    local filename="${onlyfile%.*}"

    wine_progs["$filename"]="$f"
    wine_progs["$onlyfile"]="$f"
  done

  printf "\x1b[1m${#wine_progs[@]}\x1b[22m entries found\n\n"
}

# Run a program using wine in the foreground and log its output to
# a file rather than spamming the terminal
function wine_fg() {
  local DISK="${HOME}/.wine/drive_${2:-c}"
  local PROG="${1}"

  if [ ${#wine_progs[@]} -lt 1 ]; then
    index_wine_progs
  fi

  if [ -f "${1}" ]; then
    PROG="${1}"
  elif [ -f "${DISK}/${1}" ]; then
    PROG="${DISK}/${1}"
  elif [ ! "${wine_progs[${1}]}" = "" ]; then
    if [ -f "${wine_progs[${1}]}" ]; then
      PROG="${wine_progs[${1}]}"
    fi
  elif [ ! "${wine_progs[\"${1}\"]}" = "" ]; then
    if [ -f "${wine_progs[\"${1}\"]}" ]; then
      PROG="${wine_progs[\"${1}\"]}"
    fi
  elif [ ! -f "${PROG}" ]; then
    printf "Cannot find program ${PROG}\n"
    return 1
  fi

  local LOGS="$HOME/.wine/logs"
  local LOG=$(basename "${LOGS}/${PROG}.log")

  printf "\x1b[36mWine Drive\x1b[39m %s\n" "${DISK}"
  printf "\x1b[36mProgram\x1b[39m    %s\n" "${PROG}"
  printf "\x1b[36mLogs Dir\x1b[39m   %s\n" "${LOGS}"
  printf "\x1b[36mLog Name\x1b[39m   %s\n" "${LOGS}/${LOG}"
  printf "\nStarting...\x1b[1m%s\x1b[22m\n" "$(basename "${PROG}")"

  if [ ! -d "${LOGS}" ]; then
    mkdir "${LOGS}"
  fi

  shift 1

  WINEDEBUG=+all

  wine &>"${LOGS}/${LOG}" "${PROG}" ${@}

  unset WINEDEBUG
}

# Run a program in the same manner as `wine_fg` but background the process
# so the shell is freed up for other tasks
function wine_bg() {
  wine_fg "${1}" "${2}" "${3}" "${4}" "${5}" &
}

# Shortcut for running WinUAE using the above methods
function winuae() {
  wine_bg winuae64 "${1}" "${2}" "${3}" "${4}" "${5}"
}
